

    Collection(interface):
        - Collection interface is considered as root interface of Collection framework
        - Collection interface provides some useful methods to the child interface(list,set,queue)
        - All the collection does not have index number, ONLY list has
        - Collection(interface) it is extended by List, Set and Queue.
        - We should use Collections because it can increase or decrease the size
        - We should use Collections because it is a Standard data structure and there are ready methods to use
        - for example for the array we don't have ready methods as much as the collection does
        - The disadvantage of the Collection is, it only supports non-primitive data types
        - but if you want to store some primitives values, we wrap it by using Wrapper classes
        - All the collections has toArray() method, we can use it to convert Collection to the array(array it is fastest)

    List:
        - It allows duplicates
        - It has index numbers
        - Insertion order preserved
        - Every single data structure that has insertion order preserved they all have index numbers
        - Any class that implements List they all share same features of List interface
        - Each class has their own speciality (ArrayList, LinkedList, Vector, Stack)
        - in the future you always be using the ArrayList
        - ArrayList is most used one.
    ArrayList:
    - if searching/accessing the element your priority, you should go with ArrayList
    - if inserting/deleting the element your priority, you should go with LinkedList
    - Vector class it uses synchronized keyword, methods of the Vector class use synchronized keyword
    - synchronized means Thread are created by process they access to the resources one at the time
    - Process&Thread --> Thread cannot be exist without the process
        --> Process is what creates the thread
        --> Thread is sub-sequence of the Process basically
        --> Every single process they need at least one thread.
        --> Process is an instance of the execution of the program.
        --> For process to be executed any activity is done within the process by creating threads
        --> Multi-threading means if more than one thread being created within the process
        --> every single process has Resource, if it is not synchronized all the threads that are created they
        access the resource of the process at the same time
        --> If it is synchronized they will access one at the time
    Vector:
    - Vector is synchronized version of the ArrayList
    - Vector is similar to the ArrayList, it implicitly uses the array, but methods of the Vector it has synchronized keyword
    - Which means whenever Vector being use within the multi-thread environment, if multiple threads are being executed,
    those threads will get executed ONE at the time, rest of threads will be waiting.
    - If the synchronization is the main priority, you should go with either Vector or Stack.
    Stack:
    - Methods of the vector will be inherited as it is to the Stack
    - Stack is also synchronized
    - what makes stack different than Vector?
        --> the difference is Stack it has special order
        --> whenever you need to take out the last inserted objects one by one during the iteration, Stack could be
        the best choice, beacause it does have Last-in, first out order
        --> The Pop method is only unique for the Stack, every time when the Pop method called, whichever was the last
        inserted object it will be return, it will be out of the stack


    Set:
    - It is child interface of the Collection.
    - What makes the Set different than the other child interfaces of the Collection?
        --> The Set it does not allowed the duplicates
        --> you can never store the duplicated object into the set
        --> every time when you store the duplicate objects previous duplicated ones will be removed and it will only store
        the last one.
    - Insertion order not preserved, so it can be random as well
    - Set does not have index numbers
    - When the set is the reference type you can create object from HashSet, LinkedHashSet and TreeSet
    - Which one to use it depends on the scenario
    - The methods that has Set has will be shared by the child interface and classes
    HashSet:
    - It is most used one in the set family
    - What makes the HashSet class different than the other class of the Set?
        --> HashSet class it does not need to maintain any order, therefore the HashSet is the fastest one
        --> HashSet does not have index order
        --> HashSet it could accept any object or anything that can be assigned to the refernce such as Null keyword
        even it's not an object.
        --> null is the default value of the any non-primitives
        --> Order does not matter
    LinkedHashSet:
    - It is the child class of HashSet
    - What is special about LinkedHashSet?
        --> it maintains the insertion order
        --> LinkedHashSet does not allow the duplicates
        --> If you want to remove the duplicated object and you want to keep same order, you should go with LinkedHashSet
    TreeSet:
    - it implements the SortedSet interface
    - Whenever you add the elements they will be in the ascending order/sorted order
    - TreeSet does not allow the duplicates
    - TreeSet does not accept the null keyword, anything you store in the TreeSet it needs to be an actual object
    - if you try to store null keyword it will give you NullPointerException


    Queue:
    - Queue interface is the child interface of the Collection
    - It has "IS A" relationship with 3 classes (Priority queue, ArrayDeque, LinkedList)
    - Queue has a child interface which is Deque
    - Queue interface is totally different than List and Set
    - Queue it does allow duplicates, you can store the duplicate elements into the Queue
    - The difference between The Queue and The List that List has indexes and insertion order while Queue has not.
    - Queue has a unique order in Java, that order known as First-in, First out order (FIFO).
    - LinkedList has "IS A" relationship with List and Queue. (so LinkedList is a List & LinkedList is a Queue)
    - the poll method every time when you call the method it will return you the first element, and remove it
    LinkedList:
    - it is doubly linked
    - The advantage of doubly linked is insertion/deletion are faster
    - LinkedList it has index number
    - LinkedList it does accept null values
    Priority Queue:
    - Priority Queue class implements the queue interface
    - Priority Queue it maintains the random order.(similar to the HashSet)
    - it keeps the random order
    - Priority Queue it does not accept null keyword.
    ArrayDequeue:
    - ArrayDequeue it implicitly uses array
    - ArrayDequeue it does maintain the insertion order
    - ArrayDequeue it does not have index number
    - it keeps the insertion order.(similar to the Hashset)
    - It does accept the null values




