

    Reference Type Casting
        1. Upcasting: casting sub type to the super type
            - it is done implicitly

            Car car = new BMW();

        2. Down-casting: casting super type to sub type
            - it is done explicitly
            - ClassCastException

            Animal animal = new Dog();

            ( (Dog)animal ).bark();


    OOP CONCEPTS OVERALL SUMMARY
        - Object Oriented Programing
        - Basically it is a designing pattern, it designs the application in organized and in easier, readable

        ADVANTAGES:
            - improves the reusability (all the methods,variables,objects)
            - easy to maintain because you will be stored all the common features in a centralized structure
            so if you need to change any of them, you can go to just one place to change it
            - less memory usage
            - less codes you will be avoiding the duplicates
            - no repetition
            - Flexible

        4 PRINCIPLES
            #1- Encapsulation: hiding the data by giving private access modifier
                    private - getter(read) - setter(set)
                - once you declare as private you can access just in the object
                - by making it private we are restricting the access and the modification of the variable
                - only way to achieve it setter and getter method
                - if the private data is final, we can only generate getter

            #2- Inheritance: Building "IS A" relationship
                    parent - child
                - Child class gets riches
                - child class: inherits all the variable & methods (that are visible) from the parent class
                - it can extend only one class
                - parent class: does not inherit anything from child class
                providing common features
                - if a class is final you can not inherit it, it can not be a parent

                - Object class --> is the parent of all the classes
                - A class can be parent and child

                METHOD OVERRIDING:
                    - If the method needs multiple different implementation in the other classes then you can override

            #3- Abstraction: hiding the implementation details
                - abstract method: in order to hide implementation details we need an abstract method
                - abstract method does not have a body
                - if sub classes need different implementations parent class does not need to worry about the implementations
                - every single method in Java they must perform a task
                - When they are inherited to the child class, child class has to override the abstract methods
                - Abstract method is meant to be overridden

              - There are 2 ways to achieve abstraction
                #1 Abstract class
                    - It is meant to be a parent
                    - class is not concrete ==> No objects, you can not create objects
                    - it should contain common features for all the sub class
                    - for the abstract method you can not use PRIVATE access modifier
                    - class can extend one abstract class only

               #2 Interface
                    - If they do need some features we can create interfaces
                    - it's not a class
                    - it is used for providing additional methods that classes need
                    - with the interface multiple inheritance its allowed
                    - %100 achieve abstraction
                    - PUBLIC access modifier is a MUST, it is the only access modifier
                    - interface can not have instances(variables/methods), constructor, blocks
                    - interface can have;
                        variable: static & final by default
                        methods: abstract method, static method, default method
                            default method --> it is going to be instance method in the sub classes
                            it will be treated as instance method in the sub-class

                    WebDriver
                    WebElement
                    TakeScreenShot
                    JavaScriptExecuter
                    List
                    Set
                    ...

            #4- Polymorphism: Ability of the objects to take on many-forms

                - Reference type is parent class
                - Object type is child class
                - Only method/variables of Reference type you can call
                - always gets executed overridden version of the methods



            Method Overriding vs Method Overloading
                - Overloading it can happen in the same class
                - Overriding it must happen in the sub-class
                - For the overriding inheritance is a MUST
                - Method overriding means having one method with multiple implementations
                - Overloading between multiple methods
                - Any method that you have you can always overload it
                - overloading means creating different methods with the same name
                - parameter MUST be different in the overloading
                - When you override a method the access modifier has to be same or more visible
                - Only the instance method can be overridden (except final & private & static)
                - return type in the overriding must be the same, in the overloading does not matter





