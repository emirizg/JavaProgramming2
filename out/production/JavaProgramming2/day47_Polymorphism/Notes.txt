
    Polymorphism:
    - Many forms
    - "IS A" relationship is a MUST, you need inheritance
    - If there is no "IS A" so it means there is no polymorphism
    - Reference type is parent class/interface, and object types is child class
    - ONLY the reference type you can access, The reference type decides what can be accessed/called

    - Animal animal1 = new Dog();
      Reference type = Object type
      Referencing to

    - Object type decides which

    INSTANCEOF KEYWORD:
        - It is used to check if a reference name is referencing to the specific object.
        - It checks the object type of the reference variable
        - It returns boolean

    POLYMORPHISM RULES
        - Reference type can be parent class or interface
        - You can not make the reference type as child and being reference to the parent object NEVER!!! It's not possible
        - In polymorphism reference type must be parent class or interface
        - You can only call the features from the Reference type
        - Reference name it has to match all the possible objects, give a meaningful name


        casting: converting one type to another

    2 types of Casting

        1. Primitive Type Castings ---> msut happen between primitives
            1.1 Implicit primitive type casting: (automatically)
                - casting smaller primitive type to large

            1.2 Explicit primitive type casting: (manually)
                - casting larger primitive type to smaller


        2. Reference Type Castings
            - There must ba inheritance, without inheritance there is no possibility, it's impossible
            - otherwise you can have ClassCastException

            UPCASTING (similar implicit primitive casting)
            - it is done implicitly, it does not require to use cast operator
            - it is done implicitly by the compiler
            - child to parent ---- sub to super
            - Object type must be the child of Reference Type

            DOWN-CASTING
            - Explicit action is a MUST
            - Casting the larger reference type to the smaller reference type
            -



       - Main goal of Interface is providing additional methods that the class needs to implement
       - The whole reason we declare a variable is to reuse it, if you are not going to reuse it again
       there is no point to having that variable







