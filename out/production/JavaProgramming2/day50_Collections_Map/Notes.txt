

    Collections FrameWork
    - Collection it consists of multiple interface, each interface is implemented by classes.
    - Collection is the root interface of the List, Queue and Set interface.
    - Collection is provider of the some useful methods.
    - It has dynmaic size
    - it has ready methods to use/apply
    - It does not allow the primitive types
    - Collection can be List, can be Set and can be Queue
    - the collection is extended by List, Set and Queue.
    - there are some classes that are implementing those interfaces
    - all of the collection classes/interfaces they have toArray() method
    - toArray() --> it allows you to convert any collection to the array

    List:
    - Duplicates are allowed
    - It has index number, because insertion order preserved order
    - It keeps insertion order
    - in all the List class you can store "null" keyword.
        ArrayList:
        - it is an array based class
        - it is faster for searching/accessing elements
        LinkedList:
        - it is known as doubly linked list, each element has a pointer to to the next element
        - insertion/deletion is fast
        Vector:
        - Another way to call Vector is "Synchronized Arraylist"
        - It is just like the ArrayList, but it is synchronized version of the ArrayList.
        - every single method of the Vector they do contain synchronized keyword.
        - synchronized: it means whenever we have multiple threads, those threads get executed one at the time.
        - Thread-Safe.
        - Process creates the threads.
        - Process is execution instance of the program.
        - Thread is the sub-sequence of the process.
        - Every single process the do have at least one thread, otherwise execution can not be happen.
        - The process can create multiple threads.
        - Synchronized == One at the time
        Stack:
        - it is child of Vector
        - it is also Synchronized
        - it has last-in First out order
        - pop() ==> LIFO

    Set:
    - Duplicates are not allowed
    - it does not have index number
    - insertion order is not preserved
    - In set only one class does maintain the insertion order
    - All of the Set classes they do reject the duplicates.
        HashSet:
        - Performance is the fastest because it does not maintain any order at all.
        - it maintains random order
        LinkedHashSet:
        - it is child class of the HashSet
        - it maintains insertion order
        TreeSet:
        - It is implementing SortedSet interface
        - SortedSet is the child interface of the Set interface
        - it maintains sorted order
        - it does not except "null"

    Queue:
    - Duplicates are allowed
    - it does not have index number
    - insertion order is not preserved
    - it has First-in first out order
    - poll() ==> FIFO
    Priority Queue:
    - it maintains random order
    ArrayDeque:
    - it is implementing Deque interface
    - insertion order
    LinkedList:











